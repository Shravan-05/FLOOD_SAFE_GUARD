import { storage } from "../storage";

// Constants for risk assessment
const RISK_LEVELS = {
  HIGH: 'HIGH',
  MEDIUM: 'MEDIUM',
  LOW: 'LOW'
};

const ROAD_STATUS = {
  UNDER_FLOOD: 'UNDER_FLOOD',
  NEAR_FLOOD: 'NEAR_FLOOD',
  SAFE: 'SAFE'
};

// Haversine formula to calculate distance between two points
function haversine(lat1: number, lon1: number, lat2: number, lon2: number): number {
  const R = 6371.0; // Earth radius in km
  const lat1Rad = lat1 * Math.PI / 180;
  const lon1Rad = lon1 * Math.PI / 180;
  const lat2Rad = lat2 * Math.PI / 180;
  const lon2Rad = lon2 * Math.PI / 180;
  
  const dlat = lat2Rad - lat1Rad;
  const dlon = lon2Rad - lon1Rad;
  
  const a = Math.sin(dlat / 2) ** 2 + Math.cos(lat1Rad) * Math.cos(lat2Rad) * Math.sin(dlon / 2) ** 2;
  const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  
  return R * c; // Distance in km
}

// Check if a point (x,y) is inside a circle with center (cx,cy) and radius r
function isInsideCircle(x: number, y: number, cx: number, cy: number, r: number): boolean {
  const distance = haversine(x, y, cx, cy);
  return distance <= r;
}

// Random Forest model implementation (simplified version of the notebook classifier)
function predictFloodRisk(waterLevel: number, criticalThreshold: number, distanceToRiver: number): string {
  console.log(`Predicting flood risk - Water Level: ${waterLevel}, Critical Threshold: ${criticalThreshold}, Distance: ${distanceToRiver}km`);
  
  // Distance override: if user is more than 5km from any river, risk is always LOW
  // This matches the client-side distance override
  if (distanceToRiver > 5) {
    console.log(`Server forcing LOW risk due to large distance (${distanceToRiver}km) from river`);
    return RISK_LEVELS.LOW;
  }
  
  // Simple rule-based prediction based on notebook logic
  let riskLevel;
  if (waterLevel >= criticalThreshold + 5) {
    riskLevel = RISK_LEVELS.HIGH;
    console.log(`Risk HIGH: Water level (${waterLevel}) exceeds critical threshold (${criticalThreshold}) by 5+`);
  } else if (waterLevel >= criticalThreshold) {
    riskLevel = RISK_LEVELS.HIGH;
    console.log(`Risk HIGH: Water level (${waterLevel}) exceeds critical threshold (${criticalThreshold})`);
  } else if (waterLevel >= criticalThreshold - 5) {
    riskLevel = RISK_LEVELS.MEDIUM;
    console.log(`Risk MEDIUM: Water level (${waterLevel}) is within 5 of critical threshold (${criticalThreshold})`);
  } else if (distanceToRiver < 0.5) { // Within 500m of river
    riskLevel = RISK_LEVELS.MEDIUM;
    console.log(`Risk MEDIUM: User is very close (${distanceToRiver}km) to river`);
  } else {
    riskLevel = RISK_LEVELS.LOW;
    console.log(`Risk LOW: Water level (${waterLevel}) below threshold and distance (${distanceToRiver}km) sufficient`);
  }
  
  return riskLevel;
}

// Get the closest river level for a given location
async function getClosestRiverLevel(latitude: number, longitude: number) {
  const radius = 10; // 10 km radius
  const riverLevels = await storage.getRiverLevelsByArea(latitude, longitude, radius);
  
  if (riverLevels.length === 0) {
    // Generate test river data when no real data is available
    console.log("No river data found, generating test data");
    
    // Create test river at a random location near the user
    const randomOffset = () => (Math.random() - 0.5) * 0.02; // About 1-2km offset
    
    const testRiver = {
      id: 999,
      name: "Test River",
      latitude: latitude + randomOffset(),
      longitude: longitude + randomOffset(),
      level: Math.random() * 15 + 5, // 5-20m level
      criticalThreshold: 15, // Standard critical threshold
      updatedAt: new Date().toISOString()
    };
    
    const distance = haversine(latitude, longitude, testRiver.latitude, testRiver.longitude);
    
    return {
      riverLevel: testRiver,
      distance
    };
  }
  
  let closestRiver = riverLevels[0];
  let minDistance = haversine(latitude, longitude, riverLevels[0].latitude, riverLevels[0].longitude);
  
  for (const river of riverLevels) {
    const distance = haversine(latitude, longitude, river.latitude, river.longitude);
    if (distance < minDistance) {
      minDistance = distance;
      closestRiver = river;
    }
  }
  
  return {
    riverLevel: closestRiver,
    distance: minDistance
  };
}

type RiskZone = {
  center: {
    lat: number;
    long: number;
  };
  radius: number;
  level: string;
};

class FloodService {
  // Assess flood risk for a given location
  async assessFloodRisk(latitude: number, longitude: number) {
    console.log(`Assessing flood risk for location: ${latitude}, ${longitude}`);
    
    // Get the closest river
    const closestRiverData = await getClosestRiverLevel(latitude, longitude);
    
    if (!closestRiverData) {
      console.log(`No river data found - defaulting to LOW risk`);
      return {
        riskLevel: RISK_LEVELS.LOW,
        waterLevel: 0,
        thresholdLevel: 0,
        distance: 999, // Large distance to ensure client sees LOW risk
        riverName: null
      };
    }
    
    const { riverLevel, distance } = closestRiverData;
    console.log(`Found river: ${JSON.stringify(riverLevel)}, distance: ${distance}km`);
    
    // Enable risk calculation (remove forced LOW risk)
    const riskLevel = predictFloodRisk(
      riverLevel.level,
      riverLevel.criticalThreshold || riverLevel.level - 5, // Default critical threshold if not set
      distance
    );
    
    console.log(`Calculated risk: ${riskLevel}`);
    
    return {
      riskLevel,
      waterLevel: riverLevel.level,
      thresholdLevel: riverLevel.criticalThreshold,
      distance, 
      riverName: this.getRiverNameByLocation(riverLevel.latitude, riverLevel.longitude)
    };
  }
  
  // Assess road status - implementing the road status classifier from the notebook
  async assessRoadStatus(startLat: number, startLong: number, endLat: number, endLong: number) {
    // Get river levels near road start and end points
    const radius = 5; // 5 km radius
    const riverLevelsStart = await storage.getRiverLevelsByArea(startLat, startLong, radius);
    const riverLevelsEnd = await storage.getRiverLevelsByArea(endLat, endLong, radius);
    
    // Combine river levels
    const allRiverLevels = [...riverLevelsStart, ...riverLevelsEnd];
    
    if (allRiverLevels.length === 0) {
      // If no real river data, generate test data for demonstration
      const testRiver = {
        latitude: startLat + (endLat - startLat) * 0.3, // 30% along the route
        longitude: startLong + (endLong - startLong) * 0.3,
        level: Math.random() * 20, // 0-20m level
        criticalThreshold: 15
      };
      
      const distanceToStart = haversine(startLat, startLong, testRiver.latitude, testRiver.longitude);
      const distanceToEnd = haversine(endLat, endLong, testRiver.latitude, testRiver.longitude);
      
      // Randomly decide if the road is flooded
      const randomVal = Math.random();
      if (randomVal < 0.2 && (distanceToStart < 0.2 || distanceToEnd < 0.2)) {
        return ROAD_STATUS.UNDER_FLOOD;
      } else if (randomVal < 0.5 && (distanceToStart < 0.5 || distanceToEnd < 0.5)) {
        return ROAD_STATUS.NEAR_FLOOD;
      }
      
      return ROAD_STATUS.SAFE;
    }
    
    // Check if any river level is close to the road (start or end point)
    for (const river of allRiverLevels) {
      const distanceToStart = haversine(startLat, startLong, river.latitude, river.longitude);
      const distanceToEnd = haversine(endLat, endLong, river.latitude, river.longitude);
      
      // Check if road is under flood (within 200 meters of a flooded area)
      if ((distanceToStart < 0.2 || distanceToEnd < 0.2) && 
          river.level > (river.criticalThreshold || 0)) {
        return ROAD_STATUS.UNDER_FLOOD;
      }
      
      // Check if road is near flood (within 500 meters of a flooded area)
      if ((distanceToStart < 0.5 || distanceToEnd < 0.5) && 
          river.level > (river.criticalThreshold || 0) - 5) {
        return ROAD_STATUS.NEAR_FLOOD;
      }
    }
    
    // If no flood indicators, the road is safe
    return ROAD_STATUS.SAFE;
  }
  
  // Get safe routes between two points
  async getSafeRoutes(startLat: number, startLong: number, endLat: number, endLong: number) {
    // Get all roads in the area
    const centerLat = (startLat + endLat) / 2;
    const centerLong = (startLong + endLong) / 2;
    const radius = haversine(startLat, startLong, endLat, endLong) * 1.5; // Buffer around route
    
    const allRoads = await storage.getRoadsByArea(centerLat, centerLong, radius);
    
    // If no roads found, generate simulated roads for testing
    if (allRoads.length === 0) {
      const testRoutes = this.generateTestRoutes(startLat, startLong, endLat, endLong);
      return testRoutes;
    }
    
    // Categorize roads by status
    const safeRoads = allRoads.filter(road => road.status === ROAD_STATUS.SAFE);
    const cautionRoads = allRoads.filter(road => road.status === ROAD_STATUS.NEAR_FLOOD);
    const floodedRoads = allRoads.filter(road => road.status === ROAD_STATUS.UNDER_FLOOD);
    
    // Format routes for the map
    const routes = [
      // Safe routes (preferred)
      ...safeRoads.map(road => ({
        id: road.id,
        name: road.name,
        status: road.status,
        path: [
          [road.startLat, road.startLong],
          [road.endLat, road.endLong]
        ]
      })),
      
      // Caution routes (only if needed)
      ...cautionRoads.map(road => ({
        id: road.id,
        name: road.name,
        status: road.status,
        path: [
          [road.startLat, road.startLong],
          [road.endLat, road.endLong]
        ]
      })),
      
      // Flooded routes (for information only)
      ...floodedRoads.map(road => ({
        id: road.id,
        name: road.name,
        status: road.status,
        path: [
          [road.startLat, road.startLong],
          [road.endLat, road.endLong]
        ]
      }))
    ];
    
    // If we have at least one route, add a direct connection 
    // between start point and the nearest road, and end point and nearest road
    if (routes.length > 0) {
      // Find closest road to start and end points
      let closestStartRoad = allRoads[0];
      let closestEndRoad = allRoads[0];
      let minStartDist = Infinity;
      let minEndDist = Infinity;
      
      for (const road of safeRoads.length > 0 ? safeRoads : allRoads) {
        // Distance to road start
        const distToRoadStart = haversine(startLat, startLong, road.startLat, road.startLong);
        if (distToRoadStart < minStartDist) {
          minStartDist = distToRoadStart;
          closestStartRoad = road;
        }
        
        // Distance to road end
        const distToRoadEnd = haversine(endLat, endLong, road.endLat, road.endLong);
        if (distToRoadEnd < minEndDist) {
          minEndDist = distToRoadEnd;
          closestEndRoad = road;
        }
      }
      
      // Add connecting routes
      if (minStartDist < 10) {
        routes.unshift({
          id: 1001, // Using numerical ID
          name: 'Start Connector',
          status: ROAD_STATUS.SAFE,
          path: [
            [startLat, startLong],
            [closestStartRoad.startLat, closestStartRoad.startLong]
          ] as [number, number][]
        });
      }
      
      if (minEndDist < 10) {
        routes.push({
          id: 1002, // Using numerical ID
          name: 'End Connector',
          status: ROAD_STATUS.SAFE,
          path: [
            [closestEndRoad.endLat, closestEndRoad.endLong],
            [endLat, endLong]
          ] as [number, number][]
        });
      }
    }
    
    // Return formatted routes for map rendering
    return routes;
  }
  
  // Generate test routes between start and end points for demo purposes when no real data available
  generateTestRoutes(startLat: number, startLong: number, endLat: number, endLong: number): any[] {
    // Get distance between points
    const directDistance = haversine(startLat, startLong, endLat, endLong);
    
    // Calculate midpoints with some variation
    const getMidPoint = (offset = 0) => {
      const midLat = (startLat + endLat) / 2;
      const midLong = (startLong + endLong) / 2;
      
      // Add some random variation
      const latVariation = (Math.random() - 0.5) * 0.01 * directDistance;
      const longVariation = (Math.random() - 0.5) * 0.01 * directDistance;
      
      return {
        lat: midLat + latVariation + offset,
        long: midLong + longVariation + offset
      };
    };
    
    // Generate risk areas for testing
    const riskAreas: RiskZone[] = [
      {
        center: {
          lat: startLat + (endLat - startLat) * 0.3,
          long: startLong + (endLong - startLong) * 0.3
        },
        radius: 0.001 * directDistance, // Scale with distance
        level: RISK_LEVELS.HIGH
      },
      {
        center: {
          lat: startLat + (endLat - startLat) * 0.7,
          long: startLong + (endLong - startLong) * 0.7
        },
        radius: 0.0015 * directDistance,
        level: RISK_LEVELS.MEDIUM
      }
    ];
    
    // Check if a point is in a risk area
    const isInRiskArea = (lat: number, long: number) => {
      for (const area of riskAreas) {
        if (isInsideCircle(lat, long, area.center.lat, area.center.long, area.radius)) {
          return area.level;
        }
      }
      return null;
    };
    
    // Create route statuses based on risk areas
    const getRouteStatus = (path: [number, number][]) => {
      for (const [lat, long] of path) {
        const risk = isInRiskArea(lat, long);
        if (risk === RISK_LEVELS.HIGH) {
          return ROAD_STATUS.UNDER_FLOOD;
        } else if (risk === RISK_LEVELS.MEDIUM) {
          return ROAD_STATUS.NEAR_FLOOD;
        }
      }
      return ROAD_STATUS.SAFE;
    };
    
    // Create multiple routes with different paths
    const routes: any[] = [];
    
    // Direct route
    const directRoute = {
      id: 1000,
      name: 'Direct Route',
      path: [
        [startLat, startLong],
        [endLat, endLong]
      ] as [number, number][],
      status: "" // Will be set based on risk areas
    };
    directRoute.status = getRouteStatus(directRoute.path);
    routes.push(directRoute);
    
    // Northern route with 2 waypoints
    const midNorth = getMidPoint(0.005);
    const northRoute = {
      id: 1001,
      name: 'Northern Route',
      path: [
        [startLat, startLong],
        [midNorth.lat, midNorth.long],
        [endLat, endLong]
      ] as [number, number][],
      status: ""
    };
    northRoute.status = getRouteStatus(northRoute.path);
    routes.push(northRoute);
    
    // Southern route with 3 waypoints
    const midSouth1 = getMidPoint(-0.005);
    const midSouth2 = {
      lat: midSouth1.lat - 0.002,
      long: midSouth1.long + 0.003
    };
    const southRoute = {
      id: 1002,
      name: 'Southern Route',
      path: [
        [startLat, startLong],
        [midSouth1.lat, midSouth1.long],
        [midSouth2.lat, midSouth2.long],
        [endLat, endLong]
      ] as [number, number][],
      status: ""
    };
    southRoute.status = getRouteStatus(southRoute.path);
    routes.push(southRoute);
    
    // Always ensure at least one safe route
    let hasSafeRoute = routes.some(route => route.status === ROAD_STATUS.SAFE);
    if (!hasSafeRoute) {
      // Add a safe detour route
      const detourMid1 = {
        lat: startLat + (endLat - startLat) * 0.33 + 0.01,
        long: startLong + (endLong - startLong) * 0.33 + 0.01
      };
      const detourMid2 = {
        lat: startLat + (endLat - startLat) * 0.66 + 0.01,
        long: startLong + (endLong - startLong) * 0.66 + 0.01
      };
      
      const detourRoute = {
        id: 1003,
        name: 'Safe Detour Route',
        path: [
          [startLat, startLong],
          [detourMid1.lat, detourMid1.long],
          [detourMid2.lat, detourMid2.long],
          [endLat, endLong]
        ] as [number, number][],
        status: ROAD_STATUS.SAFE
      };
      routes.push(detourRoute);
    }
    
    return routes;
  }
  
  // Helper methods
  getRiverNameByLocation(latitude: number, longitude: number) {
    // Simplified - would use a database of river names in a real app
    const riverCoordinates: Record<string, string> = {
      "17.385044_78.486671": "Musi River", // Hyderabad
      "18.520407_73.856255": "Mula River", // Pune
      "19.076090_72.877426": "Mithi River", // Mumbai
      "12.971599_77.594566": "Vrishabhavathi River" // Bangalore
    };
    
    // Find the closest known river
    let minDistance = Infinity;
    let closestRiver = "River";
    
    for (const [coords, name] of Object.entries(riverCoordinates)) {
      const [riverLat, riverLong] = coords.split('_').map(Number);
      const distance = haversine(latitude, longitude, riverLat, riverLong);
      
      if (distance < minDistance) {
        minDistance = distance;
        closestRiver = name;
      }
    }
    
    return closestRiver;
  }
}

export const floodService = new FloodService();
